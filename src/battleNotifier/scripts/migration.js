import fs from 'fs';

// Script will accept a path to a bn.store.json file as an argument and an output path where it will generate the SQL statements to migrate the data to the new database structure.

// Example call with node:
// node migration.js bn.store.json migration.sql

const bnStorePath = process.argv[2];
const outputFilePath = process.argv[3];

const UserConfigListItem = item => {
  const battleTypes = item.battleTypes || [];
  const designers = item.designers || [];
  const levelPatterns = item.levelPatterns || [];
  const battleAttributes = item.battleAttributes || [];
  const minDuration = item.minDuration || 0;
  const maxDuration = item.maxDuration || 0;
  return {
    battleTypes,
    designers,
    levelPatterns,
    battleAttributes,
    minDuration,
    maxDuration,
  };
};

const UserConfigList = list => {
  return list.map(item => UserConfigListItem(item));
};

const UserConfigLists = values => {
  const notifyList = values.notifyList ? UserConfigList(values.notifyList) : [];
  const ignoreList = values.ignoreList ? UserConfigList(values.ignoreList) : [];
  return { notifyList, ignoreList };
};

const UserConfig = values => {
  const kuskiIndex = values.kuskiIndex;
  const userId = values.userId;
  const isOn = values.isOn !== undefined ? values.isOn : false;
  const lists = UserConfigLists({
    notifyList: values.notifyList,
    ignoreList: values.ignoreList,
  });
  return { kuskiIndex, userId, isOn, ...lists };
};

const csvFromArray = arr => {
  return arr?.join(',') ?? '';
};

const userConfigListItemToBnKuski = (values, isIgnoreList) => {
  const BattleTypes = csvFromArray(values.battleTypes);
  const Designers = csvFromArray(values.designers);
  const LevelPatterns = csvFromArray(values.levelPatterns);
  const BattleAttributes = csvFromArray(values.battleAttributes);
  const MinDuration = values.minDuration ?? 0;
  const MaxDuration = values.maxDuration ?? 0;
  const IgnoreList = isIgnoreList ? 1 : 0;
  return {
    BattleTypes,
    Designers,
    LevelPatterns,
    BattleAttributes,
    MinDuration,
    MaxDuration,
    IgnoreList,
  };
};

const userConfigListToBnKuski = (list, isIgnoreList) => {
  return list.map(item => userConfigListItemToBnKuski(item, isIgnoreList));
};

const userConfigListsToBnKuskiRules = values => {
  const notifyList = values.notifyList
    ? userConfigListToBnKuski(values.notifyList, false)
    : [];
  const ignoreList = values.ignoreList
    ? userConfigListToBnKuski(values.ignoreList, true)
    : [];
  return [...notifyList, ...ignoreList];
};

const userConfigToBnKuski = values => {
  const KuskiIndex = values.kuskiIndex;
  const DiscordId = values.userId;
  const BnEnabled = values.isOn ? 1 : 0;
  const notifyList = values.notifyList ?? [];
  const ignoreList = values.ignoreList ?? [];
  const BnKuskiRules = userConfigListsToBnKuskiRules({
    notifyList,
    ignoreList,
  });

  return { KuskiIndex, DiscordId, BnEnabled, BnKuskiRules };
};

const store = JSON.parse(fs.readFileSync(bnStorePath, 'utf8'));

const userIds = Array.from(Object.keys(store));

const kuskiIndexPlaceholder = '[KUSKI_INDEX_PLACEHODLER]';

let result = `-- This file is generated by bn/migration.js. It contains SQL statements that can be used to migrate the current bn.store.json to the new database structure.

-- Please note that the ${kuskiIndexPlaceholder} needs to be replaced with the correct KuskiIndex for each user, since the current bn.store.json only persists their DiscordId.\n
`;

for (const userId of userIds) {
  const username = store[userId].username;
  const userConfig = UserConfig(store[userId]);
  const data = userConfigToBnKuski(userConfig);

  result += `-- DiscordId: ${userId} (${username})\n\n`;

  result += `UPDATE setting SET BnEnabled = ${data.BnEnabled} WHERE DiscordId = '${userId}';\n`;

  result += `INSERT INTO bn_kuski_rule (KuskiIndex, BattleTypes, Designers, LevelPatterns, BattleAttributes, MinDuration, MaxDuration, IgnoreList)\n`;

  for (let i = 0; i < data.BnKuskiRules.length; i++) {
    const rule = data.BnKuskiRules[i];
    result += `VALUES (${kuskiIndexPlaceholder}, '${rule.BattleTypes}', '${rule.Designers}', '${rule.LevelPatterns}', '${rule.BattleAttributes}', ${rule.MinDuration}, ${rule.MaxDuration}, ${rule.IgnoreList});\n`;

    const isLastRule = i === data.BnKuskiRules.length - 1;
    result += isLastRule ? '\n' : '';
  }
}

console.log(result);

fs.writeFileSync(outputFilePath, result);
